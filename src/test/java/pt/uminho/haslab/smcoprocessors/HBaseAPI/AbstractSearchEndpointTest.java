package pt.uminho.haslab.smcoprocessors.HBaseAPI;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.client.Put;
import org.junit.After;
import org.junit.Test;
import pt.uminho.haslab.smcoprocessors.SmpcConfiguration;
import pt.uminho.haslab.smcoprocessors.helpers.Clusters;
import pt.uminho.haslab.smcoprocessors.helpers.TestClusterTables;
import pt.uminho.haslab.smhbase.interfaces.Dealer;
import pt.uminho.haslab.smhbase.sharemindImp.SharemindDealer;
import pt.uminho.haslab.smhbase.sharemindImp.SharemindSharedSecret;
import pt.uminho.haslab.testingutils.ValuesGenerator;

import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

public abstract class AbstractSearchEndpointTest {

	protected static final Log LOG = LogFactory
			.getLog(AbstractSearchEndpointTest.class.getName());
	protected static String secretFamily = "protectedFamily";
	protected static String secretQualifier = "protectedQualifier";
	protected SmpcConfiguration config;
	private Clusters clusters;

	protected abstract int getNumberOfRegionServers();
	protected abstract int getNumberOfRegions();

	public AbstractSearchEndpointTest() throws Exception {

		List<String> resources = new ArrayList<String>();

		for (int i = 0; i < 3; i++) {
			String fileName = "hbase-site-" + i + ".xml";
			LOG.debug("Going to start cluster with file " + fileName);
			resources.add(fileName);
		}
		LOG.debug("Booting Clusters");
		clusters = new Clusters(resources, getNumberOfRegionServers());
		Thread.sleep(1000);
		LOG.debug("Clusters booted");
		String resource = "hbase-site-0.xml";
		Configuration conf = new Configuration();
		conf.addResource(resource);
		config = new SmpcConfiguration(conf);
	}

	@After
	public void tearDown() throws IOException, InterruptedException {
		System.out.println("tearDown invoked");
		// while(true){
		// Thread.sleep(100000);
		// ;}
		// clusters.tearDown();
		// Wait for ports to be free for next tests
		Thread.sleep(50000);
	}

	public abstract void searchEndpointComparision(Dealer dealer,
			List<BigInteger> values, TestClusterTables tables, int nbits)
			throws Throwable;

	protected abstract String getTestTableName();

	BigInteger[][] getSplitKeys(int nRegions, List<List<BigInteger>> values) {
		BigInteger[][] res = new BigInteger[values.size()][nRegions - 1];
		int nElemsPerRegion = values.get(0).size() / nRegions;
		for (int j = 0; j < values.size(); j++) {
			int i = nElemsPerRegion;
			int resIndex = 0;
			do {
				res[j][resIndex] = values.get(j).get(i);
				resIndex += 1;
				i += nElemsPerRegion;
			} while (i < values.get(0).size());

		}
		return res;
	}

	BigInteger[] splitHalf(List<List<BigInteger>> values) {
		BigInteger[] res = new BigInteger[values.size()];
		int nElemsPerRegion = values.get(0).size() / 2;

		for (int i = 0; i < values.size(); i++) {
			System.out.println("HalfSplit "
					+ values.get(i).get(nElemsPerRegion));
			res[i] = values.get(i).get(nElemsPerRegion);
		}
		return res;
	}

	@Test
	public void search() throws Throwable {
		LOG.debug("Starting search test");
		/*
		 * The values generated by these testes must be between 0 and 62. The
		 * reasons for this are that the Sharemind dealer always uses a mod of
		 * nBits +1.If the generated value is 62 then the mod will be 63. Since
		 * the values are being exchanged by a protocol buffer message that is
		 * assuming longs, and the secrets are converted to longs, then the
		 * maximum value of a long is (2^63) -1. Long uses 64 bits, one for sign
		 * and the other 63 to hold the value.
		 */
		int nBits = ValuesGenerator.maxBits;
		LOG.debug("Generating test values");
		List<BigInteger> values = ValuesGenerator.equalSearchEndpointList();
		LOG.debug("Generated values size is " + values.size());
		LOG.debug("Creating table " + getTestTableName() + " with family "
				+ secretFamily);
		TestClusterTables tables = clusters.createTables(getTestTableName(),
				secretFamily);
		LOG.debug("NBits " + nBits);
		Dealer dealer = new SharemindDealer(nBits);

		byte[] cf = secretFamily.getBytes();
		byte[] cq = secretQualifier.getBytes();
		LOG.debug("Going to insert records");

		List<BigInteger> firstPutSecrets = new ArrayList<BigInteger>();
		List<BigInteger> secondPutSecrets = new ArrayList<BigInteger>();
		List<BigInteger> thirdPutSecrets = new ArrayList<BigInteger>();
		/* *
		 * Store a set of random generated values minus the last element. The
		 * last element is used to test a get of a value that is not stored.
		 */
		for (int i = 0; i < values.size(); i++) {

			BigInteger value = values.get(i);
			LOG.debug("Value to share is " + value + " bitLength "
					+ value.bitLength());
			SharemindSharedSecret secret = (SharemindSharedSecret) dealer
					.share(value);

			firstPutSecrets.add(secret.getU1());
			secondPutSecrets.add(secret.getU2());
			thirdPutSecrets.add(secret.getU3());

			byte[] id = ("" + i).getBytes();

			Put putC1 = new Put(id);
			putC1.add(cf, cq, secret.getU1().toByteArray());
			putC1.add(cf, "val".getBytes(), value.toByteArray());

			Put putC2 = new Put(id);
			putC2.add(cf, cq, secret.getU2().toByteArray());
			putC2.add(cf, "val".getBytes(), value.toByteArray());

			Put putC3 = new Put(id);
			putC3.add(cf, cq, secret.getU3().toByteArray());
			putC3.add(cf, "val".getBytes(), value.toByteArray());
			LOG.debug(i + " - ( " + secret.getU1() + ", " + secret.getU2()
					+ ", " + secret.getU3() + " )");
			tables.put(0, putC1).put(1, putC2).put(2, putC3);

		}
		List<List<BigInteger>> sharedVals = new ArrayList<List<BigInteger>>();
		sharedVals.add(firstPutSecrets);
		sharedVals.add(secondPutSecrets);
		sharedVals.add(thirdPutSecrets);

		if (getNumberOfRegions() > 1) {
			// BigInteger[][] splitKeys = getSplitKeys(getNumberOfRegions(),
			// sharedVals);
			// BigInteger[] splitKeys = splitHalf(sharedVals);
			LOG.debug("Splitting tables");
			// clusters.splitTables(getTestTableName(), splitKeys);
			// Thread.sleep(40000);
		}
		tables = clusters.newClusterTablesClient(getTestTableName());
		LOG.debug("Going for searchEndpointComparision");
		searchEndpointComparision(dealer, values, tables, nBits);
	}
}
